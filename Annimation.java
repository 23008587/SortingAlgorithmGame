package group_8;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author munzh
 */
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.font.FontRenderContext;
import java.awt.font.LineMetrics;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
public class Annimation extends javax.swing.JFrame {

    /**
     * Creates new form Annimation
     */
    Graphics g;
    Thread animationThread;
    public Annimation() {
        initComponents();
        //
        g = Panel.getGraphics();
        
        Panel.paintComponents(g);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Panel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        Panel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout PanelLayout = new javax.swing.GroupLayout(Panel);
        Panel.setLayout(PanelLayout);
        PanelLayout.setHorizontalGroup(
            PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1400, Short.MAX_VALUE)
        );
        PanelLayout.setVerticalGroup(
            PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
  

// Helper function to pause execution
 void pause(int milliseconds) {
    try {
        Thread.sleep(milliseconds);
    } catch (InterruptedException ex) {
        Thread.currentThread().interrupt();
    }
}

// Helper function to draw the pass number and the array
private int yStart = 50; // Initial y-coordinate
void drawPassAndArray(int[] arr, Graphics g, int passNumber) {
    // Draw the pass information string
    g.setColor(Color.BLACK);
    String passInfo = "Pass " + passNumber + ": ";
    if (passNumber == 1) {
        passInfo += "original array";
    }
    int f = 10, k = 20;
    g.drawString(passInfo, f, yStart); // Use yStart instead of k

    // Draw the array at multiple coordinates (grid-like)
    int xStart = 10;
    int xSpacing = 50; // Horizontal space between numbers
    int ySpacing = 30; // Vertical space between numbers
    int x = xStart;
    int y = yStart + 20; // Start drawing array below pass info

    // Loop through the array and draw numbers at multiple coordinates
    for (int i = 0; i < arr.length; i++) {
        // Draw the updated number at current (x, y) coordinates
        String numbString = Integer.toString(arr[i]);
        g.drawString(numbString, x, y);

        // Move to next x position
        x += xSpacing;

        // Move to next row if x exceeds screen width
        if (x > 1400) {
            // Assuming the screen width is 400 pixels
            x = xStart; // Reset x to start
            y += ySpacing; // Move down to the next row
        }
    }

    // Update yStart for the next pass
    yStart += 50; // Move down 50 pixels for the next pass
}

void drawPivot(int[] arr, Graphics g, int pivotIndex) {
    // Set color for the pivot highlight
    g.setColor(Color.RED);

    // Draw pivot information
    String pivotInfo = "Pivot: " + arr[pivotIndex];
    int xPivot = 10; // Starting x-coordinate for the pivot label
    int yPivot = yStart - 20; // Draw pivot information above the array

    // Draw the pivot label
    g.drawString(pivotInfo, xPivot, yPivot);

    // Draw the pivot value in a highlighted color at the correct array position
    int xStart = 10;
    int xSpacing = 50;
    int yArray = yStart; // yStart is updated by drawPassAndArray method

    // Calculate x and y position of the pivot element in the array
    int xPivotValue = xStart + (pivotIndex * xSpacing);
    int yPivotValue = yArray + 20; // Slightly below the pass information

    // Draw the pivot value in red to indicate it's the pivot
    g.drawString(Integer.toString(arr[pivotIndex]), xPivotValue, yPivotValue);
}
//merge
// Helper function to draw the pass number and the array

void drawPassAndArrayMerge(int[] arr, Graphics g, String passInfo) {
    // Draw the pass information string
    g.setColor(Color.BLACK);
    g.drawString(passInfo, 10, yStart);

    // Draw the array at multiple coordinates (grid-like)
    int xStart = 10;
    int xSpacing = 50; // Horizontal space between numbers
    int ySpacing = 30; // Vertical space between numbers
    int x = xStart;
    int y = yStart + 20; // Start drawing array below pass info

    // Loop through the array and draw numbers at multiple coordinates
    for (int i = 0; i < arr.length; i++) {
        // Draw the updated number at current (x, y) coordinates
        String numbString = Integer.toString(arr[i]);
        g.drawString(numbString, x, y);

        // Move to next x position
        x += xSpacing;

        // Move to next row if x exceeds screen width
        if (x > 1400) {
            x = xStart; // Reset x to start
            y += ySpacing; // Move down to the next row
        }
    }

    // Update yStart for the next pass
    yStart += 50; // Move down 50 pixels for the next pass
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Annimation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Annimation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Annimation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Annimation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Annimation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Panel;
    // End of variables declaration//GEN-END:variables
}
 class SelectionSort {

    int[] Selectionsort(int[] arr) {
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {

            
            int min_idx = i;

            
            for (int j = i + 1; j < n; j++) {
                if (arr[j] < arr[min_idx]) {
                   
                    min_idx = j;
                }
            }

            if (min_idx != i) {
                int temp = arr[i];
                arr[i] = arr[min_idx];
                arr[min_idx] = temp;
            }

            System.out.print("Pass " + (i + 1) + ": ");
            return arr;
        }
        int[] array = {0,0,0};
        return array ;
    }
   

 
}
/*
 int[] arr = {5, 7, 9, 10, 25};
        SelectionSort sort = new SelectionSort();
        int[] arry = sort.Selectionsort(arr);
        int k = 0;

        while (k < arr.length) {
             int n = arr.length;
        for (int i = 0; i < n - 1; i++) {

            
            int min_idx = i;

            
            for (int j = i + 1; j < n; j++) {
                if (arr[j] < arr[min_idx]) {
                   
                    min_idx = j;
                }
            }

            if (min_idx != i) {
                int temp = arr[i];
                arr[i] = arr[min_idx];
                arr[min_idx] = temp;
            }

          
           
        
            for (int y = 10; y < 300; y += 30) {
                for (int x = 10; x < 400; x += 30) {
                    String numbString = Integer.toString(arry[k]);
                    g.drawString(numbString, x, y);

                    try {
                        Thread.sleep(1000); // Pause for 1 second
                        k++;
                        System.out.print("Pass " + (i + 1) + ": ");
                        if(k ==5){
                            k = 0;
                        }
                    } catch (InterruptedException ex) {
                        Thread.currentThread().interrupt();
                    }
                }
            }
        } }
    }
});
    animationThread.start();

*/
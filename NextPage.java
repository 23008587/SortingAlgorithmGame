
package group_8;


import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author 27825
 */
public class NextPage extends javax.swing.JFrame {

    /**
     * Creates new form NextPage
     */
    public NextPage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        bubbleSort = new javax.swing.JCheckBox();
        selectionSort = new javax.swing.JCheckBox();
        insertionSort = new javax.swing.JCheckBox();
        mergeSort = new javax.swing.JCheckBox();
        quickSort = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        array = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(0, 102, 153));

        bubbleSort.setFont(new java.awt.Font("Stencil", 1, 36)); // NOI18N
        bubbleSort.setText("BUBBLE SORT ALGORITHM");
        bubbleSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bubbleSortActionPerformed(evt);
            }
        });

        selectionSort.setFont(new java.awt.Font("Stencil", 1, 36)); // NOI18N
        selectionSort.setText("SELECTION SORT ALGORITHM");
        selectionSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectionSortActionPerformed(evt);
            }
        });

        insertionSort.setFont(new java.awt.Font("Stencil", 1, 36)); // NOI18N
        insertionSort.setText("INSERTION SORT ALGORITHM");
        insertionSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertionSortActionPerformed(evt);
            }
        });

        mergeSort.setFont(new java.awt.Font("Stencil", 1, 36)); // NOI18N
        mergeSort.setText("MERGE SORT ALGORITHM");
        mergeSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mergeSortActionPerformed(evt);
            }
        });

        quickSort.setFont(new java.awt.Font("Stencil", 1, 36)); // NOI18N
        quickSort.setText("QUICK SORT ALGORITHM");
        quickSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quickSortActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Viner Hand ITC", 3, 48)); // NOI18N
        jLabel1.setText("            SORTING ALGORITHMS");

        jLabel2.setFont(new java.awt.Font("Vivaldi", 3, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 102, 0));
        jLabel2.setText("                            Click the sortong algorithms you want...");

        jButton1.setBackground(new java.awt.Color(102, 204, 0));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        jButton1.setText("NEXT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/Picture 3.jpg"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(347, 347, 347)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1250, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(530, 530, 530)
                .addComponent(selectionSort, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(530, 530, 530)
                .addComponent(insertionSort, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(array, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(820, 820, 820)
                .addComponent(jButton1))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(530, 530, 530)
                .addComponent(quickSort, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(530, 530, 530)
                .addComponent(bubbleSort, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(530, 530, 530)
                .addComponent(mergeSort, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jLabel3)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(13, 13, 13)
                .addComponent(jLabel2)
                .addGap(110, 110, 110)
                .addComponent(selectionSort)
                .addGap(19, 19, 19)
                .addComponent(insertionSort)
                .addGap(179, 179, 179)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(array, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1)))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(460, 460, 460)
                .addComponent(quickSort))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(220, 220, 220)
                .addComponent(bubbleSort))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(400, 400, 400)
                .addComponent(mergeSort))
            .addComponent(jLabel3)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void bubbleSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bubbleSortActionPerformed
        // TODO add your handling code here:
        bubbleSort.setSelected(true);
        selectionSort.setSelected(false);
        mergeSort.setSelected(false);
        insertionSort.setSelected(false);
        quickSort.setSelected(false);
    }//GEN-LAST:event_bubbleSortActionPerformed

    private void selectionSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectionSortActionPerformed
        // TODO add your handling code here:
         bubbleSort.setSelected(false);
        selectionSort.setSelected(true);
        mergeSort.setSelected(false);
        insertionSort.setSelected(false);
        quickSort.setSelected(false);
        
        
    }//GEN-LAST:event_selectionSortActionPerformed

    private void mergeSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mergeSortActionPerformed
        // TODO add your handling code here:
         bubbleSort.setSelected(false);
        selectionSort.setSelected(false);
        mergeSort.setSelected(true);
        insertionSort.setSelected(false);
        quickSort.setSelected(false);
    }//GEN-LAST:event_mergeSortActionPerformed

    private void insertionSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertionSortActionPerformed
        // TODO add your handling code here:
         bubbleSort.setSelected(false);
        selectionSort.setSelected(false);
        mergeSort.setSelected(false);
        insertionSort.setSelected(true);
        quickSort.setSelected(false);
    }//GEN-LAST:event_insertionSortActionPerformed
   
    

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        Annimation ann = new Annimation();//  Create an object to access the Annimation Page
            String arry = array.getText();//Store the array displayed in the page into a string called arry
            String[] items = arry.replaceAll("\\[", "").replaceAll("\\]", "").replaceAll("\\s", "").split(",");//convert the string to an array 

            int[] results = new int[items.length];// declare an integer array

            for (int i = 0; i < items.length; i++) {// a loop to store the String array into the integer arrat
                try {
                    results[i] = Integer.parseInt(items[i]);
                } catch (NumberFormatException nfe) {
                    
                };
            }
        if(selectionSort.isSelected()){//if user selects the Selection sort arry
            ann.animationThread = new Thread(new Runnable() {// create a thread for annimation
                @Override
                public void run() {//create a method to run a thread
                    SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {

                    int[] arr = results;// to access the array that the user 1st inserted we restore it in the arr variable which is an array
                    int n = arr.length;// n holds the lentgh of an array 
                    for (int i = 0; i < n - 1; i++) {
                        int min_idx = i;

                        // Draw the pass number and the array before swapping
                       ann.drawPassAndArray(arr, ann.g, i + 1);

                        // Pause for 1 second before continuing
                       ann.pause(1000);

                        // Find the minimum element in the unsorted portion
                        for (int j = i + 1; j < n; j++) {
                            if (arr[j] < arr[min_idx]) {
                                min_idx = j;
                            }
                        }

                        // Swap the found minimum element with the first element
                        if (min_idx != i) {
                            int temp = arr[i];
                            arr[i] = arr[min_idx];
                            arr[min_idx] = temp;
                        }

                        // Draw the pass number and array after swapping
                        ann.drawPassAndArray(arr,ann.g, i + 1);

                        // Pause for 1 second before the next iteration
                      ann.pause(1000);
                    }

                    // Draw the final sorted array after the loop ends
                    ann.drawPassAndArray(arr, ann.g, n); // Final pass after the sorting is done
                }
                    });
                            }
                    
            });
            ann.animationThread.start();//start a thread
            ann.show();//show the aniation page
}
        else if(bubbleSort.isSelected()){// if user selects bubble sort
       ann.animationThread = new Thread(new Runnable() {
    @Override
    public void run() {
        int[] arr = results;
         int n = arr.length;

        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                ann.drawPassAndArray(arr, ann.g, 1);
                            
                           ann.pause(1000);
                           int k =2;
                for (int i = 0; i < n - 1; i++) {
                    for (int j = 0; j < n - i - 1; j++) {
                        if (arr[j] > arr[j + 1]) {
                            int temp = arr[j];
                            arr[j] = arr[j + 1];
                            arr[j + 1] = temp;
                            
                            ann.drawPassAndArray(arr, ann.g, k++);
                            
                           ann.pause(1000);
                        }
                    }
                }
            }
        });
    }
});
ann.animationThread.start();
ann.show();
 
            
        }
        else if(insertionSort.isSelected()){//If user select insertion sort 
              ann.animationThread = new Thread(new Runnable() {//create a thread for annimation
                @Override
                public void run() {// make a method to run a thread
                      SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {

                    int[] arr = results;//store the original array in the variable arr
                    int n = arr.length;// srote the length of the array
                  
                     for (int i = 1; i < n; ++i) {//create a loop
            int key = arr[i];//create a key
            int j = i - 1;//create a variable j

            ann.pause(1000);// make the annimation stop for 1 second
            while (j >= 0 && arr[j] > key) {
                arr[j + 1] = arr[j];
                j = j - 1;
            }
            arr[j + 1] = key;

            System.out.print("Pass " + i + ": ");
                    // Draw the pass number and array after swapping
                        ann.drawPassAndArray(arr,ann.g, i + 1);

                        // Pause for 1 second before the next iteration
                      ann.pause(1000);
            
        }
                
                    // Draw the final sorted array after the loop ends
                    ann.drawPassAndArray(arr, ann.g, n); // Final pass after the sorting is done
                }
                      });
                              }
            });
            ann.animationThread.start();//start a thread
            ann.show();//show the annimation
        }
        else if(mergeSort.isSelected()){
                ann.animationThread = new Thread(new Runnable() {
           @Override
           public void run() {
               int[] arr = results;
               int l = 0;
               int r = arr.length - 1;
               sort(arr, l, r, ann);
           }
       });
  ann.animationThread.start();//start a thread
            ann.show();//show the annimation

        }
        else if(quickSort.isSelected()){
    
    ann.animationThread = new Thread(new Runnable() {
        @Override
        public void run() {
            int[] arr = results;//array to be sorted
            quickSort(arr, 0, arr.length - 1, ann);  // Pass the animation object
        }
    });
    ann.animationThread.start();
    ann.show();
        }
        else{
            JOptionPane.showMessageDialog(null,"Please select a Sorting algorithm");
        }
    }//GEN-LAST:event_jButton1ActionPerformed
        // QuickSort code
    


// Main quicksort method
public void quickSort(int[] arr, int low, int high, Annimation ann) {
    if (low < high) {
       final int i = 0;
        int pivot = partition(arr, low, high);
        
        // Update the UI with the current pass and pivot
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                ann.drawPassAndArray(arr, ann.g, i);
                ann.drawPivot(arr, ann.g,pivot);
            }
        });
        
        // Pause to make the animation visible
        try {
            Thread.sleep(1000); // Pause for 1 second
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        
        // Recursively sort the left and right parts of the pivot
        quickSort(arr, low, pivot - 1, ann);
        quickSort(arr, pivot + 1, high, ann);
    }
}

// Partition method used in quicksort
public int partition(int[] arr, int low, int high) {
    int pivot = arr[high];
    int i = (low - 1);
    for (int j = low; j < high; j++) {
        if (arr[j] < pivot) {
            i++;
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
    int temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;
    return i + 1;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Merge Sort algorithms

// Sort function with visualization
void sort(final int arr[], final int l, final int r, final Annimation ann) {
    if (l < r) {
        int m = (l + r) / 2;
        
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                String passInfo = "Dividing array: Left [" + l + ", " + m + "] and Right [" + (m + 1) + ", " + r + "]";
                ann.drawPassAndArrayMerge(arr, ann.g, passInfo);
                ann.pause(1000);
            }
        });
        
        sort(arr, l, m, ann);
        sort(arr, m + 1, r, ann);
        merge(arr, l, m, r, ann);
    }
}

// Merge function with visualization
void merge(final int arr[], final int l, final int m, final int r, final Annimation ann) {
    
    SwingUtilities.invokeLater(new Runnable() {
        @Override
        public void run() {
            String passInfo = "Merging subarrays: Left [" + l + ", " + m + "] and Right [" + (m + 1) + ", " + r + "]";
            ann.drawPassAndArrayMerge(arr, ann.g, passInfo);
            ann.pause(1000);
        }
    });
    
    int n1 = m - l + 1;
    int n2 = r - m;
    int L[] = new int[n1];
    int R[] = new int[n2];
    
    for (int i = 0; i < n1; ++i)
        L[i] = arr[l + i];
    for (int j = 0; j < n2; ++j)
        R[j] = arr[m + 1 + j];
    
    int i = 0, j = 0;
    int k = l;
    
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }
    
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
    
    SwingUtilities.invokeLater(new Runnable() {
        @Override
        public void run() {
            String passInfo = "Array after merging: ";
            ann.drawPassAndArrayMerge(arr, ann.g, passInfo);
            ann.pause(1000);
        }
    });
}



    private void quickSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quickSortActionPerformed
        // TODO add your handling code here:
         bubbleSort.setSelected(false);
        selectionSort.setSelected(false);
        mergeSort.setSelected(false);
        insertionSort.setSelected(false);
        quickSort.setSelected(true);
    }//GEN-LAST:event_quickSortActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NextPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NextPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NextPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NextPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NextPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JLabel array;
    private javax.swing.JCheckBox bubbleSort;
    private javax.swing.JCheckBox insertionSort;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JCheckBox mergeSort;
    private javax.swing.JCheckBox quickSort;
    private javax.swing.JCheckBox selectionSort;
    // End of variables declaration//GEN-END:variables
}

